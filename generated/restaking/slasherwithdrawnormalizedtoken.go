// Code generated by https://github.com/gagliardetto/anchor-go. DO NOT EDIT.

package restaking

import (
	"errors"
	ag_binary "github.com/gagliardetto/binary"
	ag_solanago "github.com/gagliardetto/solana-go"
	ag_format "github.com/gagliardetto/solana-go/text/format"
	ag_treeout "github.com/gagliardetto/treeout"
)

// SlasherWithdrawNormalizedToken is the `slasher_withdraw_normalized_token` instruction.
type SlasherWithdrawNormalizedTokenInstruction struct {

	// [0] = [WRITE, SIGNER] slasher
	//
	// [1] = [] normalized_token_mint
	//
	// [2] = [WRITE] normalized_token_pool_account
	//
	// [3] = [] normalized_token_program
	//
	// [4] = [WRITE] slasher_normalized_token_withdrawal_ticket_account
	//
	// [5] = [] supported_token_mint
	//
	// [6] = [] supported_token_program
	//
	// [7] = [WRITE] normalized_token_pool_supported_token_reserve_account
	//
	// [8] = [WRITE] destination_supported_token_account
	//
	// [9] = [WRITE] destination_rent_lamports_account
	//
	// [10] = [] event_authority
	//
	// [11] = [] program
	ag_solanago.AccountMetaSlice `bin:"-"`
}

// NewSlasherWithdrawNormalizedTokenInstructionBuilder creates a new `SlasherWithdrawNormalizedTokenInstruction` instruction builder.
func NewSlasherWithdrawNormalizedTokenInstructionBuilder() *SlasherWithdrawNormalizedTokenInstruction {
	nd := &SlasherWithdrawNormalizedTokenInstruction{
		AccountMetaSlice: make(ag_solanago.AccountMetaSlice, 12),
	}
	nd.AccountMetaSlice[3] = ag_solanago.Meta(Addresses["TokenkegQfeZyiNwAJbNbGKPFXCWuBvf9Ss623VQ5DA"])
	return nd
}

// SetSlasherAccount sets the "slasher" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetSlasherAccount(slasher ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[0] = ag_solanago.Meta(slasher).WRITE().SIGNER()
	return inst
}

// GetSlasherAccount gets the "slasher" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetSlasherAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(0)
}

// SetNormalizedTokenMintAccount sets the "normalized_token_mint" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetNormalizedTokenMintAccount(normalizedTokenMint ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[1] = ag_solanago.Meta(normalizedTokenMint)
	return inst
}

// GetNormalizedTokenMintAccount gets the "normalized_token_mint" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetNormalizedTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(1)
}

// SetNormalizedTokenPoolAccountAccount sets the "normalized_token_pool_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[2] = ag_solanago.Meta(normalizedTokenPoolAccount).WRITE()
	return inst
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: nt_pool
	seeds = append(seeds, []byte{byte(0x6e), byte(0x74), byte(0x5f), byte(0x70), byte(0x6f), byte(0x6f), byte(0x6c)})
	// path: normalizedTokenMint
	seeds = append(seeds, normalizedTokenMint.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindNormalizedTokenPoolAccountAddressWithBumpSeed calculates NormalizedTokenPoolAccount account address with given seeds and a known bump seed.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindNormalizedTokenPoolAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindNormalizedTokenPoolAccountAddress finds NormalizedTokenPoolAccount account address with given seeds.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindNormalizedTokenPoolAccountAddress(normalizedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolAccountAddress(normalizedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetNormalizedTokenPoolAccountAccount gets the "normalized_token_pool_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetNormalizedTokenPoolAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(2)
}

// SetNormalizedTokenProgramAccount sets the "normalized_token_program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetNormalizedTokenProgramAccount(normalizedTokenProgram ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[3] = ag_solanago.Meta(normalizedTokenProgram)
	return inst
}

// GetNormalizedTokenProgramAccount gets the "normalized_token_program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetNormalizedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(3)
}

// SetSlasherNormalizedTokenWithdrawalTicketAccountAccount sets the "slasher_normalized_token_withdrawal_ticket_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetSlasherNormalizedTokenWithdrawalTicketAccountAccount(slasherNormalizedTokenWithdrawalTicketAccount ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[4] = ag_solanago.Meta(slasherNormalizedTokenWithdrawalTicketAccount).WRITE()
	return inst
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) findFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint ag_solanago.PublicKey, slasher ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: nt_withdrawal
	seeds = append(seeds, []byte{byte(0x6e), byte(0x74), byte(0x5f), byte(0x77), byte(0x69), byte(0x74), byte(0x68), byte(0x64), byte(0x72), byte(0x61), byte(0x77), byte(0x61), byte(0x6c)})
	// path: normalizedTokenMint
	seeds = append(seeds, normalizedTokenMint.Bytes())
	// path: slasher
	seeds = append(seeds, slasher.Bytes())

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindSlasherNormalizedTokenWithdrawalTicketAccountAddressWithBumpSeed calculates SlasherNormalizedTokenWithdrawalTicketAccount account address with given seeds and a known bump seed.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindSlasherNormalizedTokenWithdrawalTicketAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, slasher ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint, slasher, bumpSeed)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindSlasherNormalizedTokenWithdrawalTicketAccountAddressWithBumpSeed(normalizedTokenMint ag_solanago.PublicKey, slasher ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint, slasher, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindSlasherNormalizedTokenWithdrawalTicketAccountAddress finds SlasherNormalizedTokenWithdrawalTicketAccount account address with given seeds.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint ag_solanago.PublicKey, slasher ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint, slasher, 0)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint ag_solanago.PublicKey, slasher ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindSlasherNormalizedTokenWithdrawalTicketAccountAddress(normalizedTokenMint, slasher, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetSlasherNormalizedTokenWithdrawalTicketAccountAccount gets the "slasher_normalized_token_withdrawal_ticket_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetSlasherNormalizedTokenWithdrawalTicketAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(4)
}

// SetSupportedTokenMintAccount sets the "supported_token_mint" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetSupportedTokenMintAccount(supportedTokenMint ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[5] = ag_solanago.Meta(supportedTokenMint)
	return inst
}

// GetSupportedTokenMintAccount gets the "supported_token_mint" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetSupportedTokenMintAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(5)
}

// SetSupportedTokenProgramAccount sets the "supported_token_program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetSupportedTokenProgramAccount(supportedTokenProgram ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[6] = ag_solanago.Meta(supportedTokenProgram)
	return inst
}

// GetSupportedTokenProgramAccount gets the "supported_token_program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetSupportedTokenProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(6)
}

// SetNormalizedTokenPoolSupportedTokenReserveAccountAccount sets the "normalized_token_pool_supported_token_reserve_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetNormalizedTokenPoolSupportedTokenReserveAccountAccount(normalizedTokenPoolSupportedTokenReserveAccount ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[7] = ag_solanago.Meta(normalizedTokenPoolSupportedTokenReserveAccount).WRITE()
	return inst
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) findFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount ag_solanago.PublicKey, supportedTokenProgram ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// path: normalizedTokenPoolAccount
	seeds = append(seeds, normalizedTokenPoolAccount.Bytes())
	// path: supportedTokenProgram
	seeds = append(seeds, supportedTokenProgram.Bytes())
	// path: supportedTokenMint
	seeds = append(seeds, supportedTokenMint.Bytes())

	programID := Addresses["ATokenGPvbdGVxr1b2hvZbsiqW5xWH25efTNsLJA8knL"]

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, programID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, programID)
	}
	return
}

// FindNormalizedTokenPoolSupportedTokenReserveAccountAddressWithBumpSeed calculates NormalizedTokenPoolSupportedTokenReserveAccount account address with given seeds and a known bump seed.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindNormalizedTokenPoolSupportedTokenReserveAccountAddressWithBumpSeed(normalizedTokenPoolAccount ag_solanago.PublicKey, supportedTokenProgram ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount, supportedTokenProgram, supportedTokenMint, bumpSeed)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindNormalizedTokenPoolSupportedTokenReserveAccountAddressWithBumpSeed(normalizedTokenPoolAccount ag_solanago.PublicKey, supportedTokenProgram ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey, bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount, supportedTokenProgram, supportedTokenMint, bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindNormalizedTokenPoolSupportedTokenReserveAccountAddress finds NormalizedTokenPoolSupportedTokenReserveAccount account address with given seeds.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount ag_solanago.PublicKey, supportedTokenProgram ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount, supportedTokenProgram, supportedTokenMint, 0)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount ag_solanago.PublicKey, supportedTokenProgram ag_solanago.PublicKey, supportedTokenMint ag_solanago.PublicKey) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindNormalizedTokenPoolSupportedTokenReserveAccountAddress(normalizedTokenPoolAccount, supportedTokenProgram, supportedTokenMint, 0)
	if err != nil {
		panic(err)
	}
	return
}

// GetNormalizedTokenPoolSupportedTokenReserveAccountAccount gets the "normalized_token_pool_supported_token_reserve_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetNormalizedTokenPoolSupportedTokenReserveAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(7)
}

// SetDestinationSupportedTokenAccountAccount sets the "destination_supported_token_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetDestinationSupportedTokenAccountAccount(destinationSupportedTokenAccount ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[8] = ag_solanago.Meta(destinationSupportedTokenAccount).WRITE()
	return inst
}

// GetDestinationSupportedTokenAccountAccount gets the "destination_supported_token_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetDestinationSupportedTokenAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(8)
}

// SetDestinationRentLamportsAccountAccount sets the "destination_rent_lamports_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetDestinationRentLamportsAccountAccount(destinationRentLamportsAccount ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[9] = ag_solanago.Meta(destinationRentLamportsAccount).WRITE()
	return inst
}

// GetDestinationRentLamportsAccountAccount gets the "destination_rent_lamports_account" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetDestinationRentLamportsAccountAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(9)
}

// SetEventAuthorityAccount sets the "event_authority" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetEventAuthorityAccount(eventAuthority ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[10] = ag_solanago.Meta(eventAuthority)
	return inst
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) findFindEventAuthorityAddress(knownBumpSeed uint8) (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	var seeds [][]byte
	// const: __event_authority
	seeds = append(seeds, []byte{byte(0x5f), byte(0x5f), byte(0x65), byte(0x76), byte(0x65), byte(0x6e), byte(0x74), byte(0x5f), byte(0x61), byte(0x75), byte(0x74), byte(0x68), byte(0x6f), byte(0x72), byte(0x69), byte(0x74), byte(0x79)})

	if knownBumpSeed != 0 {
		seeds = append(seeds, []byte{byte(bumpSeed)})
		pda, err = ag_solanago.CreateProgramAddress(seeds, ProgramID)
	} else {
		pda, bumpSeed, err = ag_solanago.FindProgramAddress(seeds, ProgramID)
	}
	return
}

// FindEventAuthorityAddressWithBumpSeed calculates EventAuthority account address with given seeds and a known bump seed.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey, err error) {
	pda, _, err = inst.findFindEventAuthorityAddress(bumpSeed)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindEventAuthorityAddressWithBumpSeed(bumpSeed uint8) (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(bumpSeed)
	if err != nil {
		panic(err)
	}
	return
}

// FindEventAuthorityAddress finds EventAuthority account address with given seeds.
func (inst *SlasherWithdrawNormalizedTokenInstruction) FindEventAuthorityAddress() (pda ag_solanago.PublicKey, bumpSeed uint8, err error) {
	pda, bumpSeed, err = inst.findFindEventAuthorityAddress(0)
	return
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) MustFindEventAuthorityAddress() (pda ag_solanago.PublicKey) {
	pda, _, err := inst.findFindEventAuthorityAddress(0)
	if err != nil {
		panic(err)
	}
	return
}

// GetEventAuthorityAccount gets the "event_authority" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetEventAuthorityAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(10)
}

// SetProgramAccount sets the "program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) SetProgramAccount(program ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	inst.AccountMetaSlice[11] = ag_solanago.Meta(program)
	return inst
}

// GetProgramAccount gets the "program" account.
func (inst *SlasherWithdrawNormalizedTokenInstruction) GetProgramAccount() *ag_solanago.AccountMeta {
	return inst.AccountMetaSlice.Get(11)
}

func (inst SlasherWithdrawNormalizedTokenInstruction) Build() *Instruction {
	return &Instruction{BaseVariant: ag_binary.BaseVariant{
		Impl:   inst,
		TypeID: Instruction_SlasherWithdrawNormalizedToken,
	}}
}

// ValidateAndBuild validates the instruction parameters and accounts;
// if there is a validation error, it returns the error.
// Otherwise, it builds and returns the instruction.
func (inst SlasherWithdrawNormalizedTokenInstruction) ValidateAndBuild() (*Instruction, error) {
	if err := inst.Validate(); err != nil {
		return nil, err
	}
	return inst.Build(), nil
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) Validate() error {
	// Check whether all (required) accounts are set:
	{
		if inst.AccountMetaSlice[0] == nil {
			return errors.New("accounts.Slasher is not set")
		}
		if inst.AccountMetaSlice[1] == nil {
			return errors.New("accounts.NormalizedTokenMint is not set")
		}
		if inst.AccountMetaSlice[2] == nil {
			return errors.New("accounts.NormalizedTokenPoolAccount is not set")
		}
		if inst.AccountMetaSlice[3] == nil {
			return errors.New("accounts.NormalizedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[4] == nil {
			return errors.New("accounts.SlasherNormalizedTokenWithdrawalTicketAccount is not set")
		}
		if inst.AccountMetaSlice[5] == nil {
			return errors.New("accounts.SupportedTokenMint is not set")
		}
		if inst.AccountMetaSlice[6] == nil {
			return errors.New("accounts.SupportedTokenProgram is not set")
		}
		if inst.AccountMetaSlice[7] == nil {
			return errors.New("accounts.NormalizedTokenPoolSupportedTokenReserveAccount is not set")
		}
		if inst.AccountMetaSlice[8] == nil {
			return errors.New("accounts.DestinationSupportedTokenAccount is not set")
		}
		if inst.AccountMetaSlice[9] == nil {
			return errors.New("accounts.DestinationRentLamportsAccount is not set")
		}
		if inst.AccountMetaSlice[10] == nil {
			return errors.New("accounts.EventAuthority is not set")
		}
		if inst.AccountMetaSlice[11] == nil {
			return errors.New("accounts.Program is not set")
		}
	}
	return nil
}

func (inst *SlasherWithdrawNormalizedTokenInstruction) EncodeToTree(parent ag_treeout.Branches) {
	parent.Child(ag_format.Program(ProgramName, ProgramID)).
		//
		ParentFunc(func(programBranch ag_treeout.Branches) {
			programBranch.Child(ag_format.Instruction("SlasherWithdrawNormalizedToken")).
				//
				ParentFunc(func(instructionBranch ag_treeout.Branches) {

					// Parameters of the instruction:
					instructionBranch.Child("Params[len=0]").ParentFunc(func(paramsBranch ag_treeout.Branches) {})

					// Accounts of the instruction:
					instructionBranch.Child("Accounts[len=12]").ParentFunc(func(accountsBranch ag_treeout.Branches) {
						accountsBranch.Child(ag_format.Meta("                                       slasher", inst.AccountMetaSlice.Get(0)))
						accountsBranch.Child(ag_format.Meta("                         normalized_token_mint", inst.AccountMetaSlice.Get(1)))
						accountsBranch.Child(ag_format.Meta("                        normalized_token_pool_", inst.AccountMetaSlice.Get(2)))
						accountsBranch.Child(ag_format.Meta("                      normalized_token_program", inst.AccountMetaSlice.Get(3)))
						accountsBranch.Child(ag_format.Meta("   slasher_normalized_token_withdrawal_ticket_", inst.AccountMetaSlice.Get(4)))
						accountsBranch.Child(ag_format.Meta("                          supported_token_mint", inst.AccountMetaSlice.Get(5)))
						accountsBranch.Child(ag_format.Meta("                       supported_token_program", inst.AccountMetaSlice.Get(6)))
						accountsBranch.Child(ag_format.Meta("normalized_token_pool_supported_token_reserve_", inst.AccountMetaSlice.Get(7)))
						accountsBranch.Child(ag_format.Meta("                  destination_supported_token_", inst.AccountMetaSlice.Get(8)))
						accountsBranch.Child(ag_format.Meta("                    destination_rent_lamports_", inst.AccountMetaSlice.Get(9)))
						accountsBranch.Child(ag_format.Meta("                               event_authority", inst.AccountMetaSlice.Get(10)))
						accountsBranch.Child(ag_format.Meta("                                       program", inst.AccountMetaSlice.Get(11)))
					})
				})
		})
}

func (obj SlasherWithdrawNormalizedTokenInstruction) MarshalWithEncoder(encoder *ag_binary.Encoder) (err error) {
	return nil
}
func (obj *SlasherWithdrawNormalizedTokenInstruction) UnmarshalWithDecoder(decoder *ag_binary.Decoder) (err error) {
	return nil
}

// NewSlasherWithdrawNormalizedTokenInstruction declares a new SlasherWithdrawNormalizedToken instruction with the provided parameters and accounts.
func NewSlasherWithdrawNormalizedTokenInstruction(
	// Accounts:
	slasher ag_solanago.PublicKey,
	normalizedTokenMint ag_solanago.PublicKey,
	normalizedTokenPoolAccount ag_solanago.PublicKey,
	normalizedTokenProgram ag_solanago.PublicKey,
	slasherNormalizedTokenWithdrawalTicketAccount ag_solanago.PublicKey,
	supportedTokenMint ag_solanago.PublicKey,
	supportedTokenProgram ag_solanago.PublicKey,
	normalizedTokenPoolSupportedTokenReserveAccount ag_solanago.PublicKey,
	destinationSupportedTokenAccount ag_solanago.PublicKey,
	destinationRentLamportsAccount ag_solanago.PublicKey,
	eventAuthority ag_solanago.PublicKey,
	program ag_solanago.PublicKey) *SlasherWithdrawNormalizedTokenInstruction {
	return NewSlasherWithdrawNormalizedTokenInstructionBuilder().
		SetSlasherAccount(slasher).
		SetNormalizedTokenMintAccount(normalizedTokenMint).
		SetNormalizedTokenPoolAccountAccount(normalizedTokenPoolAccount).
		SetNormalizedTokenProgramAccount(normalizedTokenProgram).
		SetSlasherNormalizedTokenWithdrawalTicketAccountAccount(slasherNormalizedTokenWithdrawalTicketAccount).
		SetSupportedTokenMintAccount(supportedTokenMint).
		SetSupportedTokenProgramAccount(supportedTokenProgram).
		SetNormalizedTokenPoolSupportedTokenReserveAccountAccount(normalizedTokenPoolSupportedTokenReserveAccount).
		SetDestinationSupportedTokenAccountAccount(destinationSupportedTokenAccount).
		SetDestinationRentLamportsAccountAccount(destinationRentLamportsAccount).
		SetEventAuthorityAccount(eventAuthority).
		SetProgramAccount(program)
}
